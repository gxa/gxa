<?xml version="1.0" ?>
<!--
  ~ Copyright 2008-2010 Microarray Informatics Team, EMBL-European Bioinformatics Institute
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
  ~
  ~ For further details of the Gene Expression Atlas project, including source code,
  ~ downloads and documentation, please see:
  ~
  ~ http://gxa.github.com/gxa
  -->

<!-- <![CDATA[  
This is the Solr schema file. This file should be named "schema.xml" and
should be in the conf directory under the solr home
(i.e. ./solr/conf/schema.xml by default) 
or located where the classloader for the Solr webapp can find it.

This example schema is the recommended starting point for users.
It should be kept correct and concise, usable out-of-the-box.

For more information, on how to customize this file, please see
http://wiki.apache.org/solr/SchemaXml
]]> -->

<schema name="AtlasGene" version="1.1">
    <!-- <![CDATA[ attribute "name" is the name of this schema and is only used for display purposes.
         Applications should change this to reflect the nature of the search collection.
         version="1.1" is Solr's version number for the schema syntax and semantics.  It should
         not normally be changed by applications.
         1.0: multiValued attribute did not exist, all fields are multiValued by nature
         1.1: multiValued attribute introduced, false by default ]]> -->

    <types>
        <!-- <![CDATA[ field type definitions. The "name" attribute is
             just a label to be used by field definitions.  The "class"
             attribute and any other attributes determine the real
             behavior of the fieldtype.
             Class names starting with "solr" refer to java classes in the
             org.apache.solr.analysis package.
             ]]> -->

        <!-- <![CDATA[ The StrField type is not analyzed, but indexed/stored verbatim.  
             - StrField and TextField support an optional compressThreshold which
             limits compression (if enabled in the derived fields) to values which
             exceed a certain size (in characters).
             ]]> -->
        <fieldtype name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>


        <fieldtype name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>

        <!-- <![CDATA[ The optional sortMissingLast and sortMissingFirst attributes are
             currently supported on types that are sorted internally as strings.
             - If sortMissingLast="true", then a sort on this field will cause documents
             without the field to come after documents with the field,
             regardless of the requested sort order (asc or desc).
             - If sortMissingFirst="true", then a sort on this field will cause documents
             without the field to come before documents with the field,
             regardless of the requested sort order.
             - If sortMissingLast="false" and sortMissingFirst="false" (the default),
             then default lucene sorting will be used which places docs without the
             field first in an ascending sort and last in a descending sort.
             ]]> -->


        <!-- <![CDATA[ numeric field types that store and index the text
value verbatim (and hence don't support range queries, since the
lexicographic ordering isn't equal to the numeric ordering) ]]> -->
        <fieldtype name="integer" class="solr.IntField" omitNorms="true"/>
        <fieldtype name="short" class="solr.ShortField" omitNorms="true"/>
        <fieldtype name="long" class="solr.LongField" omitNorms="true"/>
        <fieldtype name="float" class="solr.FloatField" omitNorms="true"/>
        <fieldtype name="double" class="solr.DoubleField" omitNorms="true"/>


        <!-- <![CDATA[ Numeric field types that manipulate the value into
             a string value that isn't human-readable in its internal form,
             but with a lexicographic ordering the same as the numeric ordering,
             so that range queries work correctly. ]]> -->
        <fieldType name="tint" class="solr.TrieField" type="integer" omitNorms="true" positionIncrementGap="0"/>
        <fieldtype name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
        <fieldtype name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
        <fieldtype name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
        <fieldtype name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>
        <fieldtype name="binary" class="solr.BinaryField"/>


        <!-- <![CDATA[ The format for this date field is of the form 1995-12-31T23:59:59Z, and
             is a more restricted form of the canonical representation of dateTime
             http://www.w3.org/TR/xmlschema-2/#dateTime    
             The trailing "Z" designates UTC time and is mandatory.
             Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
             All other components are mandatory.

Expressions can also be used to denote calculations that should be
performed relative to "NOW" to determine the value, ie...

NOW/HOUR
... Round to the start of the current hour
NOW-1DAY
... Exactly 1 day prior to now
NOW/DAY+6MONTHS+3DAYS
... 6 months and 3 days in the future from the start of
the current day

Consult the DateField javadocs for more information.
]]> -->
        <fieldtype name="date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>

        <!-- <![CDATA[ solr.TextField allows the specification of custom text analyzers
             specified as a tokenizer and a list of token filters. Different
             analyzers may be specified for indexing and querying.

The optional positionIncrementGap puts space between multiple fields of
this type on the same document, with the purpose of preventing false phrase
matching across fields.

For more info on customizing your analyzer chain, please see
http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
]]> -->

        <!-- <![CDATA[ One can also specify an existing Analyzer class that has a
             default constructor via the class attribute on the analyzer element
             <fieldtype name="text_greek" class="solr.TextField">
             <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
             </fieldType>
             ]]> -->


        <fieldtype name="text_ws" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            </analyzer>
        </fieldtype>

        <!-- <![CDATA[ A text field that uses WordDelimiterFilter to enable splitting and matching of
             words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
             so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
             Synonyms and stopwords are customized by external files, and stemming is enabled.
             Duplicate tokens at the same position (which may result from Stemmed Synonyms or
             WordDelim parts) are removed.
             ]]> -->
        <fieldtype name="text" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!-- <![CDATA[ in this example, we will only use synonyms at query time
                     <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                     ]]> -->
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                        catenateWords="1" catenateNumbers="1" catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                        catenateWords="0" catenateNumbers="0" catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldtype>


        <!-- <![CDATA[ Less flexible matching, but less false matches.  Probably not ideal for product names,
             but may be good for SKUs.  Can insert dashes in the wrong place and still match. ]]> -->
        <fieldtype name="textTight" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0"
                        catenateWords="1" catenateNumbers="1" catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.EnglishPorterFilterFactory" protected="protwords.txt"/>
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldtype>

        <!-- <![CDATA[ This is an example of using the KeywordTokenizer along
             With various TokenFilterFactories to produce a sortable field
             that does not include some properties of the source text
             ]]> -->
        <fieldtype name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
            <analyzer>
                <!-- <![CDATA[ KeywordTokenizer does no actual tokenizing, so the entire
                     input string is preserved as a single token
                     ]]> -->
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <!-- <![CDATA[ The LowerCase TokenFilter does what you expect, which can be
                     when you want your sorting to be case insensitive
                     ]]> -->
                <filter class="solr.LowerCaseFilterFactory"/>

                <filter class="solr.TrimFilterFactory"/>
                <!-- <![CDATA[ The PatternReplaceFilter gives you the flexibility to use
                     Java Regular expression to replace any sequence of characters
                     matching a pattern with an arbitrary replacement string, 
                     which may include back refrences to portions of the orriginal
                     string matched by the pattern.
                     
                     See the Java Regular Expression documentation for more
                     infomation on pattern and replacement string syntax.
                     
                     http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html
                     ]]> -->
                <filter class="solr.PatternReplaceFilterFactory"
                        pattern="([^a-z])" replacement="" replace="all"
                        />
            </analyzer>
        </fieldtype>

        <fieldType name="prefix_full" class="solr.TextField" positionIncrementGap="1">
            <analyzer type="index">
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.EdgeNGramFilterFactory"
                        minGramSize="1" maxGramSize="50"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

        <fieldType name="prefix_token" class="solr.TextField" positionIncrementGap="1">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.EdgeNGramFilterFactory"
                        minGramSize="1" maxGramSize="50"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

        <fieldType class="solr.TextField" name="text_auto">
            <analyzer>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

        <!--<fieldType name="text_auto" class="solr.TextField" positionIncrementGap="100" omitNorms="true">-->
        <!--<analyzer type="index">-->
        <!--<tokenizer class="solr.KeywordTokenizerFactory"/>-->
        <!--<filter class="solr.LowerCaseFilterFactory"/>-->
        <!--<filter class="solr.PatternReplaceFilterFactory" pattern="\s+" replacement=" " replace="all"/>-->
        <!--<filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="15" side="front"/>-->
        <!--</analyzer>-->
        <!--<analyzer type="query">-->
        <!--<tokenizer class="solr.KeywordTokenizerFactory"/>-->
        <!--<filter class="solr.LowerCaseFilterFactory"/>-->
        <!--<filter class="solr.PatternReplaceFilterFactory" pattern="\s+" replacement=" " replace="all"/>-->
        <!--</analyzer>-->
        <!--</fieldType>-->
    </types>


    <fields>
        <!-- <![CDATA[ Valid attributes for fields:
             name: mandatory - the name for the field
             type: mandatory - the name of a previously defined type from the types section
             indexed: true if this field should be indexed (searchable or sortable)
             stored: true if this field should be retrievable
             compressed: [false] if this field should be stored using gzip compression
             (this will only apply if the field type is compressable; among
             the standard field types, only TextField and StrField are)
             multiValued: true if this field may contain multiple values per document
             omitNorms: (expert) set to true to omit the norms associated with
             this field (this disables length normalization and index-time
             boosting for the field, and saves some memory).  Only full-text
             fields or fields that need an index-time boost need norms.
             ]]> -->

        <field name="id" type="integer" indexed="true" stored="true"/>
        <field name="identifier" type="string" indexed="true" stored="true"/>
        <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>

        <field name="species" type="string" indexed="true" stored="true"/>
        <field name="species_id" type="integer" indexed="true" stored="true"/>

        <field name="name" type="text" indexed="true" stored="true"/>
        <field name="name_f" type="string" indexed="true" stored="false"/>

        <field name="orthologs" type="string" indexed="true" stored="true" multiValued="true"/>
        <field name="arraydesigns" type="string" indexed="true" stored="true" multiValued="true"/>

        <field name="properties" type="string" indexed="true" stored="true" multiValued="true"/>
        <dynamicField name="property_*" type="text" indexed="true" stored="true" multiValued="true"/>
        <dynamicField name="property_f_*" type="string" indexed="true" stored="false" multiValued="true"/>

        <field name="alltext" type="text" indexed="true" stored="false" multiValued="true"/>

        <field name="autocomplete_genename" type="text_auto" indexed="true" stored="false" multiValued="true"/>
        <field name="autocomplete_properties" type="text_auto" indexed="true" stored="false" multiValued="true"/>
    </fields>

    <uniqueKey>id</uniqueKey>


    <defaultSearchField>alltext</defaultSearchField>


    <solrQueryParser defaultOperator="OR"/>

    <!-- <![CDATA[ copyField commands copy one field to another at the time a document
         is added to the index.  It's used either to index the same field differently,
         or to add multiple fields to the same field for easier/faster searching.  ]]> -->

    <copyField source="property_*" dest="property_f_*"/>

    <copyField source="name" dest="alltext"/>
    <copyField source="species" dest="alltext"/>
    <copyField source="property_*" dest="alltext"/>

    <copyField source="name" dest="name_f"/>

    <copyField source="name" dest="autocomplete_genename"/>

    <copyField source="identifier" dest="autocomplete_properties"/>
    <copyField source="property_*" dest="autocomplete_properties"/>

</schema>
